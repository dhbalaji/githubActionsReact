{"version":3,"sources":["components/LiveClock.js","components/Home.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["getTimeEveryOneSecond","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","LiveClock","useState","setTime","useEffect","interval","setInterval","clearInterval","className","Home","src","process","alt","to","About","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iVAGMA,G,MAAwB,WAC1B,IAAMC,EAAO,IAAIC,KACbC,EAAQF,EAAKG,WACbC,EAAUJ,EAAKK,aACfC,EAAUN,EAAKO,aAMnB,MAAO,CACHL,MALJA,EAAQA,EAAQ,GAAK,IAAMA,EAAQA,EAM/BE,QALJA,EAAUA,EAAU,GAAK,IAAMA,EAAUA,EAMrCE,QALJA,EAAUA,EAAU,GAAK,IAAMA,EAAUA,KA8B9BE,MArBf,WAAsB,IAAD,EAC8BC,mBAC3CV,KAFa,0BACRG,EADQ,EACRA,MAAOE,EADC,EACDA,QAASE,EADR,EACQA,QAAWI,EADnB,KAYjB,OAPAC,qBAAU,WACN,IAAIC,EAAWC,aAAY,kBAAMH,EAAQX,OAA0B,KACnE,OAAO,WACHe,cAAcF,MAEnB,IAGC,yBAAKG,UAAU,SACX,0BAAMA,UAAU,QAAQb,GACxB,0BAAMa,UAAU,WAAhB,MAA8BX,GAC9B,0BAAMW,UAAU,WAAhB,MAA8BT,K,MC/B3B,SAASU,IACpB,OACI,yBAAKD,UAAU,OACX,4BAAQA,UAAU,cACd,yBACIE,IAAKC,iBACLH,UAAU,WACVI,IAAI,SAER,uBAAGJ,UAAU,WAAb,MAA2BG,eAE/B,0BAAMH,UAAU,8BACZ,kBAAC,EAAD,OAEJ,gCACI,kBAAC,IAAD,CAAMK,GAAG,UAAT,WClBD,SAASC,IACpB,OACI,iCACI,oDACA,8lBCAG,SAASC,IACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,UACR,kBAACF,EAAD,OAEJ,kBAAC,IAAD,CAAOE,KAAK,KACR,kBAAC,EAAD,SCFAC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2D,MCXZC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACHA,EAAaC,gBAEhBC,OAAM,SAACC,GACJC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.78c567da.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport './clock.scss'\n\nconst getTimeEveryOneSecond = () => {\n    const date = new Date()\n    let hours = date.getHours()\n    let minutes = date.getMinutes()\n    let seconds = date.getSeconds()\n\n    hours = hours < 10 ? '0' + hours : hours\n    minutes = minutes < 10 ? '0' + minutes : minutes\n    seconds = seconds < 10 ? '0' + seconds : seconds\n\n    return {\n        hours,\n        minutes,\n        seconds\n    }\n}\n\nfunction LiveClock() {\n    const [{ hours, minutes, seconds }, setTime] = useState(\n        getTimeEveryOneSecond()\n    )\n\n    useEffect(() => {\n        let interval = setInterval(() => setTime(getTimeEveryOneSecond()), 1000)\n        return () => {\n            clearInterval(interval)\n        }\n    }, [])\n\n    return (\n        <div className=\"clock\">\n            <span className=\"hour\">{hours}</span>\n            <span className=\"minutes\"> : {minutes}</span>\n            <span className=\"seconds\"> : {seconds}</span>\n        </div>\n    )\n}\n\nexport default LiveClock\n","import React from 'react'\nimport LiveClock from './LiveClock'\nimport { Link } from 'react-router-dom'\nimport './Home.scss'\n\nexport default function Home() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img\n                    src={process.env.PUBLIC_URL + '/img/logo.svg'}\n                    className=\"App-logo\"\n                    alt=\"logo\"\n                />\n                <p className=\"App-env\"> > {process.env.REACT_APP_CODE}</p>\n            </header>\n            <main className=\"clock-wrapper centre-align\">\n                <LiveClock />\n            </main>\n            <footer>\n                <Link to=\"/about\">About</Link>\n            </footer>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function About() {\n    return (\n        <section>\n            <h1>What is Lorem Ipsum?</h1>\n            <p>\n                Lorem Ipsum is simply dummy text of the printing and typesetting\n                industry. Lorem Ipsum has been the industry's standard dummy\n                text ever since the 1500s, when an unknown printer took a galley\n                of type and scrambled it to make a type specimen book. It has\n                survived not only five centuries, but also the leap into\n                electronic typesetting, remaining essentially unchanged. It was\n                popularised in the 1960s with the release of Letraset sheets\n                containing Lorem Ipsum passages, and more recently with desktop\n                publishing software like Aldus PageMaker including versions of\n                Lorem Ipsum.\n            </p>\n        </section>\n    )\n}\n","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport './App.scss'\nimport Home from './components/Home'\nimport About from './components/About'\n\nexport default function App() {\n    return (\n        <Router>\n            <Switch>\n                <Route path=\"/about\">\n                    <About />\n                </Route>\n                <Route path=\"/\">\n                    <Home />\n                </Route>\n            </Switch>\n        </Router>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'typeface-roboto'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}