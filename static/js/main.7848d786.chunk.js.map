{"version":3,"sources":["components/counter/Counter.module.scss","components/LiveClock.js","components/Home.js","components/counter/counterSlice.js","components/counter/Counter.js","components/counter/store.js","components/counter/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getTimeEveryOneSecond","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","LiveClock","useState","setTime","useEffect","interval","setInterval","clearInterval","className","Home","src","process","alt","to","initialState","count","showError","counterSlice","createSlice","name","reducers","increment","state","decrement","error","clearError","clear","actions","getCount","counter","shouldShowToast","connect","dispatch","useDispatch","useSelector","increaseCounter","useCallback","getState","decreaseCounter","counterCss","counter__err__txt","onClick","button","disabled","counter__text","configureStore","reducer","counterReducer","wrappedCounter","store","App","basename","path","Boolean","window","location","hostname","match","Sentry","dsn","integrations","Integrations","BrowserTracing","tracesSampleRate","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7848d786.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__1_pCt\",\"counter__text\":\"Counter_counter__text__z70ms\",\"counter__err__txt\":\"Counter_counter__err__txt__38Nqx\"};","import React, { useEffect, useState } from 'react'\nimport './clock.scss'\n\nconst getTimeEveryOneSecond = () => {\n    const date = new Date()\n    let hours = date.getHours()\n    let minutes = date.getMinutes()\n    let seconds = date.getSeconds()\n\n    hours = hours < 10 ? '0' + hours : hours\n    minutes = minutes < 10 ? '0' + minutes : minutes\n    seconds = seconds < 10 ? '0' + seconds : seconds\n\n    return {\n        hours,\n        minutes,\n        seconds\n    }\n}\n\nfunction LiveClock() {\n    const [{ hours, minutes, seconds }, setTime] = useState(\n        getTimeEveryOneSecond()\n    )\n\n    useEffect(() => {\n        let interval = setInterval(() => setTime(getTimeEveryOneSecond()), 1000)\n        return () => {\n            clearInterval(interval)\n        }\n    }, [])\n\n    return (\n        <div className=\"clock\">\n            <span className=\"hour\">{hours}</span>\n            <span className=\"minutes\"> : {minutes}</span>\n            <span className=\"seconds\"> : {seconds}</span>\n        </div>\n    )\n}\n\nexport default LiveClock\n","import React from 'react'\nimport LiveClock from './LiveClock'\nimport { Link } from 'react-router-dom'\nimport './Home.scss'\n\nexport default function Home() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img\n                    src={process.env.PUBLIC_URL + '/img/logo.svg'}\n                    className=\"App-logo\"\n                    alt=\"logo\"\n                />\n                <p className=\"App-env\"> > {process.env.REACT_APP_CODE}</p>\n            </header>\n            <main className=\"clock-wrapper centre-align\">\n                <LiveClock />\n            </main>\n            <footer>\n                <button>\n                    <Link to=\"/counter\">Counter</Link>\n                </button>\n            </footer>\n        </div>\n    )\n}\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n    count: 0,\n    showError: false\n}\n\nexport const counterSlice = createSlice({\n    name: 'counter',\n    initialState,\n    reducers: {\n        increment: (state) => {\n            state.count += 1\n        },\n        decrement: (state) => {\n            state.count -= 1\n            state.showError = false\n        },\n        error: (state) => {\n            state.showError = true\n        },\n        clearError: (state) => {\n          state.showError = false\n        },\n        clear: () => initialState\n    },\n})\n\nexport const checkAndIncrement = () => (dispatch, getState) => {\n    const prevCounterValue = getCount(getState());\n\n    if (prevCounterValue > 2) {\n        dispatch(error())\n        return\n    }\n    dispatch(increment())\n}\nexport const { increment, decrement, clear, error, clearError } = counterSlice.actions\n\nexport const getCount = (state) => state.counter.count;\nexport const shouldShowToast = (state) => state.counter.showError;\n\nexport default counterSlice.reducer\n","import { Link } from 'react-router-dom'\nimport { connect, useDispatch, useSelector } from 'react-redux'\nimport { checkAndIncrement, decrement, clear, getCount, shouldShowToast } from './counterSlice'\nimport React, { useCallback, useEffect } from 'react'\nimport counterCss from './Counter.module.scss'\n\nconst Counter = () => {\n    const dispatch = useDispatch()\n    useEffect(() => {\n        return () => {\n            dispatch(clear())\n        }\n    }, [dispatch])\n\n    const showError = useSelector(shouldShowToast)\n    const count = useSelector(getCount)\n    const increaseCounter = useCallback(() => dispatch(checkAndIncrement()), [dispatch])\n    const decreaseCounter = useCallback(() => dispatch(decrement()), [dispatch])\n    return (\n        <div className={counterCss.counter}>\n            <h2>Simple Counter</h2>\n            {showError && (\n                <div className={counterCss.counter__err__txt}>\n                    Max 3 allowed\n                </div>\n            )}\n            <div>\n                <button\n                    onClick={decreaseCounter}\n                    className={counterCss.button}\n                    disabled={count <= 0}\n                >\n                    -\n                </button>\n                <span className={counterCss.counter__text}>{count}</span>\n                <button onClick={increaseCounter} disabled={showError}>+</button>\n            </div>\n\n            <Link to='/'>Home</Link>\n        </div>\n    )\n}\n\n\nexport default connect()(Counter)\n","import { configureStore } from '@reduxjs/toolkit'\nimport counterReducer from './counterSlice';\n\nexport default configureStore({\n    reducer: {\n        counter: counterReducer\n    },\n})\n","import React from 'react'\nimport { Provider } from 'react-redux'\n// import { applyMiddleware, createStore, compose } from 'redux'\nimport CounterContainer from './Counter'\n// import reducer, { initialState } from './reducers'\n// import { createLogger } from 'redux-logger'\n// import ReduxThunk from 'redux-thunk'\nimport store from './store';\n\n// const logger = createLogger({\n//     // ...options\n// })\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n//\n// const store = createStore(\n//     reducer,\n//     initialState,\n//     composeEnhancers(applyMiddleware(ReduxThunk, logger))\n// )\n\nconst wrappedCounter = () => (\n  <Provider store={store}>\n    <CounterContainer />\n  </Provider>\n);\nexport default wrappedCounter;\n","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport './App.scss'\nimport Home from './components/Home'\nimport Counter from './components/counter'\n\nexport default function App() {\n    return (\n        <Router basename='/reactStaticPagesWithGithubActions'>\n            <Switch>\n                <Route path=\"/counter\">\n                    <Counter />\n                </Route>\n                <Route path=\"/\">\n                    <Home />\n                </Route>\n            </Switch>\n        </Router>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'typeface-roboto'\nimport * as Sentry from \"@sentry/react\";\nimport { Integrations } from \"@sentry/tracing\";\n\nSentry.init({\n  dsn: \"https://c797c4f00b82493e9e9f20e6d393620d@o470945.ingest.sentry.io/5502298\",\n  integrations: [\n    new Integrations.BrowserTracing(),\n  ],\n\n  // We recommend adjusting this value in production, or using tracesSampler\n  // for finer control\n  tracesSampleRate: 1.0,\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}