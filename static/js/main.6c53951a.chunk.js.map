{"version":3,"sources":["components/counter/Counter.module.scss","components/LiveClock.js","components/Home.js","components/counter/Counter.js","components/counter/selector.js","components/counter/actions/index.js","components/counter/CounterContainer.js","components/counter/reducers/index.js","components/counter/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getTimeEveryOneSecond","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","LiveClock","useState","setTime","useEffect","interval","setInterval","clearInterval","className","Home","src","process","alt","to","Counter","this","props","clearAction","showError","decrementAction","incrementAction","count","counterCss","counter","counter__err__txt","onClick","button","disabled","counter__text","React","Component","memo","getCount","state","get","shouldShowToast","INCREMENT","DECREMENT","ERROR","dispatch","getState","errorAction","type","connect","bindActionCreators","initialState","Map","showToast","reducer","action","set","logger","createLogger","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReduxThunk","wrappedCounter","CounterContainer","App","path","Boolean","location","hostname","match","Sentry","dsn","integrations","Integrations","BrowserTracing","tracesSampleRate","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6c53951a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__1_pCt\",\"counter__text\":\"Counter_counter__text__z70ms\",\"counter__err__txt\":\"Counter_counter__err__txt__38Nqx\"};","import React, { useEffect, useState } from 'react'\nimport './clock.scss'\n\nconst getTimeEveryOneSecond = () => {\n    const date = new Date()\n    let hours = date.getHours()\n    let minutes = date.getMinutes()\n    let seconds = date.getSeconds()\n\n    hours = hours < 10 ? '0' + hours : hours\n    minutes = minutes < 10 ? '0' + minutes : minutes\n    seconds = seconds < 10 ? '0' + seconds : seconds\n\n    return {\n        hours,\n        minutes,\n        seconds\n    }\n}\n\nfunction LiveClock() {\n    const [{ hours, minutes, seconds }, setTime] = useState(\n        getTimeEveryOneSecond()\n    )\n\n    useEffect(() => {\n        let interval = setInterval(() => setTime(getTimeEveryOneSecond()), 1000)\n        return () => {\n            clearInterval(interval)\n        }\n    }, [])\n\n    return (\n        <div className=\"clock\">\n            <span className=\"hour\">{hours}</span>\n            <span className=\"minutes\"> : {minutes}</span>\n            <span className=\"seconds\"> : {seconds}</span>\n        </div>\n    )\n}\n\nexport default LiveClock\n","import React from 'react'\nimport LiveClock from './LiveClock'\nimport { Link } from 'react-router-dom'\nimport './Home.scss'\n\nexport default function Home() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img\n                    src={process.env.PUBLIC_URL + '/img/logo.svg'}\n                    className=\"App-logo\"\n                    alt=\"logo\"\n                />\n                <p className=\"App-env\"> > {process.env.REACT_APP_CODE}</p>\n            </header>\n            <main className=\"clock-wrapper centre-align\">\n                <LiveClock />\n            </main>\n            <footer>\n                <button>\n                    <Link to=\"/counter\">Counter</Link>\n                </button>\n            </footer>\n        </div>\n    )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport counterCss from './Counter.module.scss'\n\nclass Counter extends React.Component {\n    componentWillUnmount() {\n        this.props.clearAction()\n    }\n\n    render() {\n        const {\n            showError,\n            decrementAction,\n            incrementAction,\n            count\n        } = this.props\n        return (\n            <div className={counterCss.counter}>\n                <h2>Simple Counter</h2>\n                {showError && (\n                    <div className={counterCss.counter__err__txt}>\n                        Max 100 allowed\n                    </div>\n                )}\n                <div>\n                    <button\n                        onClick={decrementAction}\n                        className={counterCss.button}\n                        disabled={count <= 0}\n                    >\n                        -\n                    </button>\n                    <span className={counterCss.counter__text}>{count}</span>\n                    <button onClick={incrementAction}>+</button>\n                </div>\n\n                <Link to=\"/\">Home</Link>\n            </div>\n        )\n    }\n}\n\nexport default React.memo(Counter)\n","export const getCount = (state) => state.get('count')\nexport const shouldShowToast = (state) => state.get('showToast')\n","import { getCount } from '../selector'\n\nexport const INCREMENT = 'increment'\nexport const DECREMENT = 'decrement'\nexport const CLEAR = 'clear'\nexport const ERROR = 'error'\n\nexport const incrementAction = () => {\n    return (dispatch, getState) => {\n        const count = getCount(getState())\n        if (count >= 100) {\n            // setTimeout(() => dispatch(clearAction()), 1000)\n            return dispatch(errorAction())\n        }\n        return dispatch({ type: INCREMENT })\n    }\n}\nexport const decrementAction = () => ({ type: DECREMENT })\nexport const clearAction = () => ({ type: CLEAR })\nexport const errorAction = () => ({ type: ERROR })\n","import { connect } from 'react-redux'\nimport Counter from './Counter'\nimport { bindActionCreators } from 'redux'\nimport { incrementAction, decrementAction, clearAction } from './actions'\nimport { getCount, shouldShowToast } from './selector'\nfunction mapStateToProps(state) {\n    return {\n        count: getCount(state),\n        showError: shouldShowToast(state)\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators(\n        {\n            incrementAction,\n            decrementAction,\n            clearAction\n        },\n        dispatch\n    )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter)\n","import { Map } from 'immutable'\nimport { DECREMENT, ERROR, INCREMENT } from '../actions'\nimport { getCount } from '../selector'\n\nexport const initialState = Map({\n    count: 0,\n    showToast: false\n})\n\nfunction reducer(state = initialState, action) {\n    switch (action.type) {\n        case INCREMENT:\n            return Map({\n                count: getCount(state) + 1\n            })\n        case DECREMENT:\n            return Map({\n                count: getCount(state) - 1\n            })\n        case ERROR:\n            return state.set('showToast', true)\n        default:\n            return initialState\n    }\n}\n\nexport default reducer\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { applyMiddleware, createStore, compose } from 'redux'\nimport CounterContainer from './CounterContainer'\nimport reducer, { initialState } from './reducers'\nimport { createLogger } from 'redux-logger'\nimport ReduxThunk from 'redux-thunk'\n\nconst logger = createLogger({\n    // ...options\n})\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(\n    reducer,\n    initialState,\n    composeEnhancers(applyMiddleware(ReduxThunk, logger))\n)\n\nconst wrappedCounter = () => (\n  <Provider store={store}>\n    <CounterContainer />\n  </Provider>\n);\nexport default wrappedCounter;\n","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport './App.scss'\nimport Home from './components/Home'\nimport Counter from './components/counter'\n\nexport default function App() {\n    return (\n        <Router>\n            <Switch>\n                <Route path=\"/counter\">\n                    <Counter />\n                </Route>\n                <Route path=\"/\">\n                    <Home />\n                </Route>\n            </Switch>\n        </Router>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'typeface-roboto'\nimport * as Sentry from \"@sentry/react\";\nimport { Integrations } from \"@sentry/tracing\";\n\nSentry.init({\n  dsn: \"https://c797c4f00b82493e9e9f20e6d393620d@o470945.ingest.sentry.io/5502298\",\n  integrations: [\n    new Integrations.BrowserTracing(),\n  ],\n\n  // We recommend adjusting this value in production, or using tracesSampler\n  // for finer control\n  tracesSampleRate: 1.0,\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}