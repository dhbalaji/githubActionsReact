{"version":3,"sources":["components/LiveClock.js","App.js","serviceWorker.js","index.js"],"names":["getTime","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","LiveClock","state","time","tick","setState","this","interval","setInterval","clearInterval","className","Component","App","src","process","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4TAGMA,G,MAAU,WACZ,IAAMC,EAAO,IAAIC,KACbC,EAAQF,EAAKG,WACbC,EAAUJ,EAAKK,aACfC,EAAUN,EAAKO,aAMnB,MAAO,CACHL,MALJA,EAAQA,EAAQ,GAAK,IAAMA,EAAQA,EAM/BE,QALJA,EAAUA,EAAU,GAAK,IAAMA,EAAUA,EAMrCE,QALJA,EAAUA,EAAU,GAAK,IAAMA,EAAUA,KA0C9BE,E,4MAhCXC,MAAQ,CACJC,KAAMX,K,EAGVY,KAAO,WACH,EAAKC,UAAS,SAACH,GAAD,MAAY,CACtBC,KAAMX,S,kEAIO,IAAD,OAChBc,KAAKC,SAAWC,aAAY,kBAAM,EAAKJ,SAAQ,O,6CAI/CK,cAAcH,KAAKC,Y,+BAGb,IAAD,EAGDD,KAAKJ,MADLC,KAAQR,EAFP,EAEOA,MAAOE,EAFd,EAEcA,QAASE,EAFvB,EAEuBA,QAE5B,OACI,yBAAKW,UAAU,SACX,0BAAMA,UAAU,QAAQf,GACxB,0BAAMe,UAAU,WAAhB,MAA8Bb,GAC9B,0BAAMa,UAAU,WAAhB,MAA8BX,Q,GA3BtBY,aCETC,MAlBf,WACI,OACI,yBAAKF,UAAU,OACX,4BAAQA,UAAU,cACd,yBACIG,IAAKC,iBACLJ,UAAU,WACVK,IAAI,SAER,uBAAGL,UAAU,WAAb,MAA2BI,eAE/B,0BAAMJ,UAAU,gBACZ,kBAAC,EAAD,SCJVM,EAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DAsCZ,SAASC,EAAgBC,EAAOC,GAC5BC,UAAUC,cACLC,SAASJ,GACTK,MAAK,SAACC,GACHA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACE,cAA3BF,EAAiB7B,QACbuB,UAAUC,cAAcQ,YAIxBC,QAAQC,IACJ,iHAKAZ,GAAUA,EAAOa,UACjBb,EAAOa,SAASR,KAMpBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACjBd,EAAOc,UAAUT,WAOxCU,OAAM,SAACC,GACJL,QAAQK,MAAM,4CAA6CA,M,MCzFvEC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDWrB,SAAkBrB,GACrB,GAA6C,kBAAmBC,UAAW,CAGvE,GADkB,IAAIqB,IAAIhC,IAAwBI,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIrC,OAGJ9B,OAAO+B,iBAAiB,QAAQ,WAC5B,IAAM1B,EAAK,UAAMT,IAAN,sBAEPE,IAgEhB,SAAiCO,EAAOC,GAEpC0B,MAAM3B,EAAO,CACT4B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAACwB,GAEH,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEjB,MAApBF,EAASG,QACO,MAAfF,IAC0C,IAAvCA,EAAYG,QAAQ,cAGxB/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAACC,GAChCA,EAAa6B,aAAa9B,MAAK,WAC3BV,OAAOC,SAASwC,eAKxBrC,EAAgBC,EAAOC,MAG9Be,OAAM,WACHJ,QAAQC,IACJ,oEAxFAwB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WAC/BO,QAAQC,IACJ,iHAMRd,EAAgBC,EAAOC,OCjCvCE,K","file":"static/js/main.1b3f7b9c.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './clock.scss'\n\nconst getTime = () => {\n    const date = new Date()\n    let hours = date.getHours()\n    let minutes = date.getMinutes()\n    let seconds = date.getSeconds()\n\n    hours = hours < 10 ? '0' + hours : hours\n    minutes = minutes < 10 ? '0' + minutes : minutes\n    seconds = seconds < 10 ? '0' + seconds : seconds\n\n    return {\n        hours,\n        minutes,\n        seconds\n    }\n}\n\nclass LiveClock extends Component {\n    state = {\n        time: getTime()\n    }\n\n    tick = () => {\n        this.setState((state) => ({\n            time: getTime()\n        }))\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => this.tick(), 1000)\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval)\n    }\n\n    render() {\n        const {\n            time: { hours, minutes, seconds }\n        } = this.state\n        return (\n            <div className=\"clock\">\n                <span className=\"hour\">{hours}</span>\n                <span className=\"minutes\"> : {minutes}</span>\n                <span className=\"seconds\"> : {seconds}</span>\n            </div>\n        )\n    }\n}\n\nexport default LiveClock\n","import React from 'react'\nimport './App.scss'\nimport LiveClock from './components/LiveClock'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img\n                    src={process.env.PUBLIC_URL + '/img/logo.svg'}\n                    className=\"App-logo\"\n                    alt=\"logo\"\n                />\n                <p className=\"App-env\"> > {process.env.REACT_APP_CODE}</p>\n            </header>\n            <body className=\"centre-align\">\n                <LiveClock />\n            </body>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'typeface-roboto'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}